@startuml
'https://plantuml.com/class-diagram

package Data-Layer <<Folder>> {
class UserRepository {
+ constructor(userFactory: UserFactory)
+ updateUser(userId: Int, user: UserModel): Int
}



package MySQL <<Database>> {
}
package H2 <<Database>> {
}

UserRepository --> MySQL
UserRepository --> H2

Entity User {
+ id: Int
+ firstName: String
+ lastName: String
+ role: Role
+ email: String
+ password: String
}
Entity Session {
+ userId: Int
+ token: String
+ createdBy: DateTime
+ expireDate: DateTime
}

class UpdateUserDTO {
+ firstName: String,
+ lastName: String,
+ prefixes: String?,
+ email: String,
+ role: Roles
}

class CreateUserDTO {
+ firstName: String,
+ lastName: String,
+ prefixes: String?,
+ email: String,
+ password: String
}

class UserFactory {
+ convertToUserModel(createUserDTO: CreateUserDTO): UserModel
+ convertToUpdateUserModel(updateUserDTO: UpdateUserDTO): UpdateUserModel
}

Session ..> User : uses
UserRepository ..> UserFactory : uses
UserFactory ..> CreateUserDTO : uses
UserFactory ..> UpdateUserDTO : uses
}

package Service <<Folder>> {
class UserModel {
- id: Int
- firstName: String
- prefixes: String?
- lastName: String
- role: Roles
- email: String
- password: String
- config: Config
+ emailConfig: String
- passwordConfig: String
--
+ getHashedPassword(): String
+ getUserId(): Int
+ validateUpdateUser()
}


class UserService {
+ constructor(userRepository: UserRepository,userFactory: UserFactory, searchTermParser: SearchTermParser)
+ updateUserDetails(email: String, updateUserDTO: UpdateUserDTO)
}
UserFactory ..> UserModel : uses
UserService ..> UserFactory : uses
UserService ..> UpdateUserDTO : uses
UserService ..> UserRepository : uses
}

package Controller <<Folder>> {
class UserController {
- exceptionHandler: ExceptionHandler
--
+ updateUserDetails(email: String, updateUserModel: UpdateUserDTO, call: ApplicationCall)
}

class ExceptionHandler {
+ handleExceptionResponse(exception: Exception, call: ApplicationCall)
}

UserController ..> UpdateUserDTO : uses
UserController ..> ExceptionHandler : uses
UserRepository ..> UserModel : uses
}

enum ErrorCode {
+ constructor(code: String)
--
+ NUMERIC_ID_REQUIRED
+ UNAUTHORIZED
+ SESSION_EXPIRED
+ INVALID_REQUEST_BODY
+ INVALID_QUERY_CHARACTER
+ USER_NOT_FOUND
+ INVALID_CREDENTIALS
+ CREATOR_NOT_FOUND
+ INVALID_LENGTH_FIRST_NAME
+ INVALID_LENGTH_LAST_NAME
+ INVALID_LENGTH_PREFIXES
+ INVALID_EMAIL
+ EMAIL_IS_EMPTY
+ INVALID_PASSWORD
+ INCORRECT_PASSWORD
+ NEW_PASSWORD_EQUAL_TO_OLD
+ EMAIL_ALREADY_EXISTS
+ INVALID_ROLE
+ TEAM_NOT_FOUND
+ NAME_ALREADY_EXISTS
+ INVALID_NAME_LENGTH
+ INVALID_NAME_CHARACTER
+ INVALID_STARTING_CHARACTER
+ NAME_IS_EMPTY
+ MEMBER_NOT_FOUND
+ TOO_MANY_MEMBERS
+ NOT_ENOUGH_MEMBERS
+ INVALID_MEMBER_IDS
+ MEMBER_IS_EMPTY
+ AVATAR_NOT_FOUND
+ INVALID_MIME_TYPE
+ INVALID_SIZE
+ INVALID_EXTENSION
+ INVALID_DIMENSIONS
+ INVALID_MEMBER_AMOUNT
+ CREATOR_IS_EMPTY
+ CONTEXT_NOT_FOUND
+ CONTAINER_NOT_FOUND
+ COMPONENT_NOT_FOUND
}

UserModel ..> ErrorCode : uses
UserService ..> ErrorCode : uses

@enduml