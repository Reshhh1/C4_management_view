@startuml
'https://plantuml.com/class-diagram

package Data <<Folder>> {
Entity User {
+ firstName: String
+ lastName: String
+ prefixes: String?
+ role: Roles
+ email: String
+ password: String
}

class UserRepository {
+ constructor(userFactory: UserFactory)
--
+ updatePassword(userId: Int, password: String): Int
}

class UserFactory {
+ convertToUserModel(updatePasswordDTO: UpdatePasswordDTO): UserModel
}

package MySQL <<Database>> {
}
package H2 <<Database>> {
}
UserRepository --> MySQL
UserRepository --> H2
UserRepository --> User
}

class UpdatePasswordDTO {
+ oldPassword: String,
+ newPassword: String
}

package Service {
class UserService {
+ constructor(userRepository: UserRepository,searchTermParser: SearchTermParser,userFactory: UserFactory)
--
+ updatePassword(email: String, updatePasswordDTO: UpdatePasswordDTO)
- isPasswordValid(userId: Int,updatePasswordDTO: UpdatePasswordDTO,isMatchingPassword: Boolean)
}

class UserModel {
- id: Int?
- firstName: String
- prefixes: String?
- lastName: String
- role: Roles
- email: String
- password: String
- config: Config
+ emailConfig: String
- passwordConfig: String
--
+ hashPassword(): String
- isFirstNameValid(firstName: String): Unit
- isLastNameValid(lastName: String): Unit
- isPrefixesValid(prefixes: String?): Unit
- isEmailValid(email: String): Unit
+ isPasswordValid(password: String): Unit
+ validateUserInputs(): Unit
+ doesPasswordMatch(oldPassword: String,hashedPassword: String): Boolean
}
class StringValidator {
+ isLengthValid(minimumLength: Int, maximumLength: Int, input: String): Boolean
}


UserModel ..> StringValidator : uses
UserService ..> UserRepository : uses
UserRepository ..> UserFactory : uses
UserService ..> UserFactory : uses
UserService ..> UpdatePasswordDTO : uses
UserService ..> UserModel : uses
}

package Controller {
class UserController {
constructor(userService: UserService,exceptionHandler: ExceptionHandler)
--
+ updatePassword(email: String, updatePasswordDTO: UpdatePasswordDTO, call: ApplicationCall)
}

class ExceptionHandler {
+ handleExceptionResponse(exception: Exception, call: ApplicationCall)
}

UserController ..> ExceptionHandler : uses
UserController ..> UpdatePasswordDTO : uses
UserController ..> UserService : uses
UserFactory ..> UpdatePasswordDTO : uses
}

enum ErrorCode {
+ constructor(code: String)
--
+ NUMERIC_ID_REQUIRED
+ UNAUTHORIZED
+ SESSION_EXPIRED
+ INVALID_REQUEST_BODY
+ INVALID_QUERY_CHARACTER
+ USER_NOT_FOUND
+ INVALID_CREDENTIALS
+ CREATOR_NOT_FOUND
+ INVALID_LENGTH_FIRST_NAME
+ INVALID_LENGTH_LAST_NAME
+ INVALID_LENGTH_PREFIXES
+ INVALID_EMAIL
+ EMAIL_IS_EMPTY
+ INVALID_PASSWORD
+ INCORRECT_PASSWORD
+ NEW_PASSWORD_EQUAL_TO_OLD
+ EMAIL_ALREADY_EXISTS
+ INVALID_ROLE
+ TEAM_NOT_FOUND
+ NAME_ALREADY_EXISTS
+ INVALID_NAME_LENGTH
+ INVALID_NAME_CHARACTER
+ INVALID_STARTING_CHARACTER
+ NAME_IS_EMPTY
+ MEMBER_NOT_FOUND
+ TOO_MANY_MEMBERS
+ NOT_ENOUGH_MEMBERS
+ INVALID_MEMBER_IDS
+ MEMBER_IS_EMPTY
+ AVATAR_NOT_FOUND
+ INVALID_MIME_TYPE
+ INVALID_SIZE
+ INVALID_EXTENSION
+ INVALID_DIMENSIONS
+ INVALID_MEMBER_AMOUNT
+ CREATOR_IS_EMPTY
+ CONTEXT_NOT_FOUND
+ CONTAINER_NOT_FOUND
+ COMPONENT_NOT_FOUND
}

UserModel ..> ErrorCode : uses
UserService ..> ErrorCode : uses
@enduml